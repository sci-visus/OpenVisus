
# //////////////////////////////////////////////////////////////////////////
macro(SetupCMake)

	set(CMAKE_CXX_STANDARD 11)

	# this is important for python extension too!
	SET(CMAKE_DEBUG_POSTFIX "_d")
	
	# enable parallel building
	set(CMAKE_NUM_PROCS 8)          

	# use folders to organize projects                           
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)    

	# save libraries and binaries in the same directory        
	set(EXECUTABLE_OUTPUT_PATH  ${CMAKE_BINARY_DIR})           
	set(LIBRARY_OUTPUT_PATH     ${CMAKE_BINARY_DIR})	

	if (WIN32)

		# enable parallel building
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")

		# huge file are generated by swig
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj")

		# see http://msdn.microsoft.com/en-us/library/windows/desktop/ms683219(v=vs.85).aspx
		add_definitions(-DPSAPI_VERSION=1)

		# increse number of file descriptors
		add_definitions(-DFD_SETSIZE=4096)

		# Enable PDB generation for all release build configurations.
		# VC++ compiler and linker options taken from this article:
		# see https://msdn.microsoft.com/en-us/library/fsk896zz.aspx
		set(CMAKE_C_FLAGS_RELEASE   "${CMAKE_C_FLAGS_RELEASE}   /Zi")
		set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Zi")

		set(CMAKE_EXE_LINKER_FLAGS_RELEASE    "${CMAKE_EXE_LINKER_FLAGS_RELEASE}    /DEBUG /OPT:REF /OPT:ICF /INCREMENTAL:NO")
		set(CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS_RELEASE} /DEBUG /OPT:REF /OPT:ICF /INCREMENTAL:NO")
		set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /DEBUG /OPT:REF /OPT:ICF /INCREMENTAL:NO")

	elseif (APPLE)

		set(CMAKE_MACOSX_RPATH 1)

		# force executable to bundle
		set(CMAKE_MACOSX_BUNDLE YES)

		# suppress some warnings
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-variable -Wno-reorder")

	else ()

		# allow the user to choose between Release and Debug
		if(NOT CMAKE_BUILD_TYPE)
		  set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build, options are: Debug Release" FORCE)
		endif()

		if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
		  add_definitions(-D_DEBUG=1)
		endif()

		# enable 64 bit file support (see http://learn-from-the-guru.blogspot.it/2008/02/large-file-support-in-linux-for-cc.html)
		add_definitions(-D_FILE_OFFSET_BITS=64)

		# -Wno-attributes to suppress spurious "type attributes ignored after type is already defined" messages see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=39159
		set(CMAKE_C_FLAGS    "${CMAKE_C_FLAGS}   -fPIC -Wno-attributes")
		set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -fPIC -Wno-attributes")

		# add usual include directories
		include_directories("/usr/local/include")
		include_directories("/usr/include")

	endif()

	find_package(OpenMP)
	if (OpenMP_FOUND)
		set(CMAKE_C_FLAGS          "${CMAKE_C_FLAGS}          ${OpenMP_C_FLAGS}")
		set(CMAKE_CXX_FLAGS        "${CMAKE_CXX_FLAGS}        ${OpenMP_CXX_FLAGS}")
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
	endif()	
	
endmacro()



# //////////////////////////////////////////////////////////////////////////
macro(AddExternalApp name SourceDir BinaryDir extra_args)

	if (WIN32 OR APPLE)
	  set(CMAKE_GENERATOR_ARGUMENT -G"${CMAKE_GENERATOR}")
	else()
	  set(CMAKE_GENERATOR_ARGUMENT -G"\"${CMAKE_GENERATOR}\"")
	endif()

	add_custom_target(${name} 
		COMMAND "${CMAKE_COMMAND}"  "${CMAKE_GENERATOR_ARGUMENT}" -H"${SourceDir}/"  -B"${BinaryDir}/"  -DVisus_DIR="${CMAKE_INSTALL_PREFIX}/lib/cmake/visus" ${extra_args}
		COMMAND "${CMAKE_COMMAND}"  --build "${BinaryDir}/" --config ${CMAKE_BUILD_TYPE})
	set_target_properties(${name} PROPERTIES FOLDER CMakeTargets/)

endmacro()

# ///////////////////////////////////////////////////
macro(AddVisusSwigLibrary Name SwigFile)

	set(NamePy ${Name}Py)

	#prevents rebuild every time make is called
	set_property(SOURCE ${SwigFile} PROPERTY SWIG_MODULE_NAME ${NamePy})

	set_source_files_properties(${SwigFile} PROPERTIES CPLUSPLUS ON)
	set_source_files_properties(${SwigFile} PROPERTIES SWIG_FLAGS  "${SWIG_FLAGS}")

	if (CMAKE_VERSION VERSION_LESS "3.8")
		swig_add_module(${NamePy} python ${SwigFile})
	else()
		swig_add_library(${NamePy} LANGUAGE python SOURCES ${SwigFile})
	endif()

	target_include_directories(_${NamePy} PUBLIC ${PYTHON_INCLUDE_DIRS})

	target_compile_definitions(_${NamePy} PRIVATE NUMPY_FOUND=${NUMPY_FOUND})

	if (NUMPY_FOUND)
		target_include_directories(_${NamePy} PRIVATE ${PYTHON_NUMPY_INCLUDE_DIR})
	endif()

	swig_link_libraries(${NamePy} PUBLIC ${Name})

	# anaconda is statically linking python library inside its executable, so I cannot link in order to avoid duplicated symbols
	# see https://groups.google.com/a/continuum.io/forum/#!topic/anaconda/057P4uNWyCU
	if (APPLE AND PYTHON_EXECUTABLE)
		string(FIND "${PYTHON_EXECUTABLE}" "anaconda" is_anaconda)
		if ("${is_anaconda}" GREATER -1)
			set_target_properties(_${NamePy} PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
		else()
			target_link_libraries(_${NamePy} PUBLIC ${PYTHON_LIBRARY})
		endif()
	endif()

	set_target_properties(_${NamePy} PROPERTIES FOLDER Swig/)

	if (NOT WIN32)
		set_target_properties(_${NamePy} PROPERTIES COMPILE_FLAGS "${BUILD_FLAGS} -w")
	endif()

endmacro()


# //////////////////////////////////////////////////////////////////////////
macro(AddPythonTest Name FileName WorkingDirectory)

	add_test(NAME ${Name} WORKING_DIRECTORY WorkingDirectory COMMAND $<TARGET_FILE:python> ${FileName})

	if (WIN32 OR APPLE)
		set_tests_properties(${Name} PROPERTIES ENVIRONMENT "CTEST_OUTPUT_ON_FAILURE=1;PYTHONPATH=${CMAKE_BINARY_DIR}/$<CONFIG>")
	else()
		set_tests_properties(${Name} PROPERTIES ENVIRONMENT "CTEST_OUTPUT_ON_FAILURE=1;PYTHONPATH=${CMAKE_BINARY_DIR}")
	endif()

endmacro()

# //////////////////////////////////////////////////////////////////////////
macro(FindGitRevision)
	find_program(GIT_CMD git REQUIRED)
	find_package_handle_standard_args(GIT REQUIRED_VARS GIT_CMD)
	execute_process(COMMAND ${GIT_CMD} rev-parse --short HEAD WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_VARIABLE GIT_REVISION OUTPUT_STRIP_TRAILING_WHITESPACE)
	message(STATUS "Current GIT_REVISION ${GIT_REVISION}")
endmacro()

# //////////////////////////////////////////////////////////////////////////
macro(FindVCPKGDir)
	set(VCPKG_DIR ${CMAKE_TOOLCHAIN_FILE}/../../../installed/${VCPKG_TARGET_TRIPLET})
	get_filename_component(VCPKG_DIR ${VCPKG_DIR} REALPATH)	
endmacro()

# //////////////////////////////////////////////////////////////////////////
# see https://github.com/Microsoft/vcpkg/issues/1909
macro(FixWin32FindPackageCurl)
	if (WIN32)
		list(LENGTH CURL_LIBRARIES _len_)
		if (_len_ EQUAL 1)
			unset(CURL_LIBRARY CACHE)
			unset(CURL_LIBRARY)
			unset(CURL_LIBRARIES CACHE)
			unset(CURL_LIBRARIES)
			FindVCPKGDir()
			set(CURL_LIBRARIES "debug;${VCPKG_DIR}/debug/lib/libcurl.lib;optimized;${VCPKG_DIR}/lib/libcurl.lib")
			mark_as_advanced(CURL_LIBRARIES)
			add_custom_command(TARGET VisusKernel POST_BUILD 
				COMMAND ${CMAKE_COMMAND} -E copy 
					$<$<CONFIG:Debug>:${VCPKG_DIR}/debug/bin/libcurl-d.dll> 
					$<$<NOT:$<CONFIG:Debug>>:${VCPKG_DIR}/bin/libcurl.dll> 
					$<TARGET_FILE_DIR:VisusKernel>)
		endif()
	endif()			
endmacro()


# //////////////////////////////////////////////////////////////////////////
# see https://github.com/Microsoft/vcpkg/issues/2630
macro(FixWin32FindPackageFreeImage)
	if (WIN32)
		FindVCPKGDir()
		add_custom_command(TARGET VisusKernel POST_BUILD  COMMAND ${CMAKE_COMMAND} -E copy ${VCPKG_DIR}/bin/raw_r.dll $<TARGET_FILE_DIR:VisusKernel>)
		add_custom_command(TARGET VisusKernel POST_BUILD  COMMAND ${CMAKE_COMMAND} -E copy ${VCPKG_DIR}/bin/lcms2.dll $<TARGET_FILE_DIR:VisusKernel>)
	endif()
endmacro()


# /////////////////////////////////////////////////////////////
macro(DisableAllWarnings)

	set(CMAKE_C_WARNING_LEVEL   0)
	set(CMAKE_CXX_WARNING_LEVEL 0)
	
	if(WIN32)
		set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   /W0")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W0")
	else()
		set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -w")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -w")
	endif()
endmacro()


# ///////////////////////////////////////////////////////////////////////
macro(DisablePythonDebug)

	set(SWIG_PYTHON_INTERPRETER_NO_DEBUG 1)
	target_compile_definitions(VisusKernel PUBLIC SWIG_PYTHON_INTERPRETER_NO_DEBUG=1)

	list(LENGTH PYTHON_LIBRARY _len_)
	if(NOT _len_ EQUAL 1)
	
		# example optimized;C:/Python36/libs/python36.lib;debug;C:/Python36/libs/python36_d.lib
		if (NOT _len_ EQUAL 4)
			message(FATAL_ERROR "Internal error cannot extract debug optimized libraries")
		endif()
		
		list(GET PYTHON_LIBRARY 0 item0)
		list(GET PYTHON_LIBRARY 1 item1)
		list(GET PYTHON_LIBRARY 2 item2)
		list(GET PYTHON_LIBRARY 3 item3)
		
		if ((item0 STREQUAL "optimized") AND (item2 STREQUAL "debug"))
			set(PYTHON_LIBRARY ${item1} CACHE STRING "" FORCE)
		elseif ((item0 STREQUAL "debug") AND (item2 STREQUAL "optimized"))
			set(PYTHON_LIBRARY ${item3} CACHE STRING "" FORCE)
		else()
			message(FATAL_ERROR "Internal error cannot extract debug optimized libraries")
		endif()
		
		set(PYTHON_LIBRARIES ${PYTHON_LIBRARY})
		
		if (DEFINED PYTHON_DEBUG_LIBRARY)
			unset(PYTHON_DEBUG_LIBRARY CACHE)
			unset(PYTHON_DEBUG_LIBRARY)	
			set(PYTHON_DEBUG_LIBRARY ${PYTHON_LIBRARY})
		endif()
		
		if (DEFINED PYTHON_LIBRARY_DEBUG)
			unset(PYTHON_LIBRARY_DEBUG CACHE)
			unset(PYTHON_LIBRARY_DEBUG)		
			set(PYTHON_LIBRARY_DEBUG ${PYTHON_LIBRARY})
		endif()
		
	endif()	
endmacro()
